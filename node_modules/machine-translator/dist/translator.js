'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
translator.js

license MIT

ranslator module. Uses statistical machine translation to
translate between two different languages. Loosely based on
the IMB model 1 algorithm.


var _text2token = require('text2token');

var _text2token2 = _interopRequireDefault(_text2token);

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Translator = function () {
  function Translator() {
    _classCallCheck(this, Translator);

    this.foreignWords = [];
    this.foreignLines = [];
    this.nativeWords = [];
    this.nativeLines = [];
    this.devWords = [];
    this.sentencePairs = [];

    this.probs = {};
    this.transmissions = {}; // this is t(elf)
    this.countef = {};
    this.totalf = {};
    this.totals = {};
  }

  _createClass(Translator, [{
    key: 'train',
    value: function train(nativeText, foreignText) {

      if (nativeText === undefined || foreignText === undefined) {
        throw new Error('Native and Foreign Texts are both required!');
      }

      var convertedData = _text2token2.default.text2token(nativeText);
      this.nativeLines = convertedData.lines;
      this.nativeWords = convertedData.tokens;

      var convertedForeignData = _text2token2.default.text2token(foreignText);
      this.foreignLines = convertedForeignData.lines;
      this.foreignWords = convertedForeignData.tokens;

      this.sentencePairs = [];

      for (var index = 0; index < this.nativeLines.length; index++) {
        this.sentencePairs.push([this.nativeLines[index], this.foreignLines[index]]);
      }

      this._initTransmissions();
      this._iterateEM(10);
    }
  }, {
    key: '_initTransmissions',
    value: function _initTransmissions() {
      var _this = this;

      var probs = {},
          transmissions = {};

      var _loop = function _loop(wordIndex) {
        var word = _this.nativeWords[wordIndex];
        var word_poss = [];

        // if word is in sentence then...
        for (var lineIndex = 0; lineIndex < _this.nativeLines.length; lineIndex++) {
          var sentence = _this.nativeLines[lineIndex];
          if (sentence.indexOf(word) > -1) {
            var matching = _this.foreignLines[_this.nativeLines.indexOf(sentence)];
            var matches = matching.split(' ');
            matches.forEach(function (match) {
              return word_poss.push(match);
            });
          }
        }

        /** Remove duplicates. */
        /** Add probable matches. */
        probs[word] = _underscore2.default.unique(word_poss);
      };

      for (var wordIndex = 0; wordIndex < this.nativeWords.length; wordIndex++) {
        _loop(wordIndex);
      }

      this.probs = probs;

      for (var wordIndex = 0; wordIndex < this.nativeWords.length; wordIndex++) {
        var _word = this.nativeWords[wordIndex];
        var word_probs = this.probs[_word];

        var uniform_prob = 1.0 / word_probs.length;

        var prob_set = {};

        for (var probIndex = 0; probIndex < word_probs.length; probIndex++) {
          var w = word_probs[probIndex];
          prob_set[w] = uniform_prob;
        }

        transmissions[_word] = prob_set;
      }

      this.transmissions = transmissions;
    }
  }, {
    key: '_iterateEM',
    value: function _iterateEM(count) {
      var _this2 = this;

      var _loop2 = function _loop2(index) {
        var totalf = {},
            countef = {};

        for (var wordIndex = 0; wordIndex < _this2.nativeWords.length; wordIndex++) {
          var _word2 = _this2.nativeWords[wordIndex];

          if (!_this2.probs.word) {
            continue;
          }
          /* istanbul ignore next */
          var word_probs = _this2.probs[_word2];
          /* istanbul ignore next */
          var prob_set = {};
          /* istanbul ignore next */
          for (var probIndex = 0; probIndex < word_probs.length; probIndex++) {
            var w = word_probs[probIndex];
            prob_set[w] = 0;
          }
          /* istanbul ignore next */
          countef[_word2] = count;
          /* istanbul ignore next */
          totalf[_word2] = 0;
        }

        _this2.countef = countef;
        _this2.totalf = totalf;

        var self = _this2;

        /** Iterate over each sentence pair. */
        _this2.sentencePairs.forEach(function (sentence) {

          var nativeTokens = sentence[0].split('');
          var foreignTokens = sentence[1].split('');

          for (var foreign = 0; foreign < foreignTokens.length; foreign++) {
            _this2.totals[foreign] = 0;
            for (var native = 0; native < nativeTokens.length; native++) {
              if (!_this2.transmissions.n) {
                continue;
              }
              /* istanbul ignore next */
              if (!_this2.transmissions.n.f) {
                continue;
              }
              /* istanbul ignore next */
              _this2.countef[native][foreign] += _this2.transmissions[native][foreign] / _this2.totals[foreign];
              /* istanbul ignore next */
              _this2.totalf[native] += _this2.transmissions[native][foreign] / _this2.totals[foreign];
            }
          }

          for (var _native = 0; _native < nativeTokens.length; _native++) {
            if (!_this2.probs.n) {
              continue;
            }
            /* istanbul ignore next */
            var n_prob = self.probs[_native];
            /* istanbul ignore next */
            for (var _foreign = 0; _foreign < n_prob.length; _native++) {
              _this2.transmissions[_native][_foreign] = _this2.countef[_native][_foreign] / _this2.totalf[_native];
            }
          }
        });
      };

      for (var index = 0; index < count; index++) {
        _loop2(index);
      }
    }
  }, {
    key: 'translate',
    value: function translate(nativeWord) {
      if (!this.transmissions[nativeWord] || nativeWord === undefined) {
        throw new Error('No match found!');
      }
      return this.transmissions[nativeWord];
    }
  }]);

  return Translator;
}();

exports.default = Translator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=translator.js.map