{"version":3,"sources":["../src/translator.js"],"names":["Translator","foreignWords","foreignLines","nativeWords","nativeLines","devWords","sentencePairs","probs","transmissions","countef","totalf","totals","nativeText","foreignText","undefined","Error","convertedData","reader","text2token","lines","tokens","convertedForeignData","index","length","push","_initTransmissions","_iterateEM","wordIndex","word","word_poss","lineIndex","sentence","indexOf","matching","matches","split","forEach","match","_","unique","word_probs","uniform_prob","prob_set","probIndex","w","count","self","nativeTokens","foreignTokens","foreign","native","n","f","n_prob","nativeWord"],"mappings":"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","file":"translator.js","sourcesContent":["/**\n * translator.js\n *\n * @license MIT\n *\n * Translator module. Uses statistical machine translation to\n * translate between two different languages. Loosely based on\n * the IMB model 1 algorithm.\n */\n\nimport reader from 'text2token';\nimport _ from 'underscore';\n\nexport default class Translator {\n\n  constructor() {\n    this.foreignWords   = [];\n    this.foreignLines   = [];\n    this.nativeWords    = [];\n    this.nativeLines    = [];\n    this.devWords       = [];\n    this.sentencePairs  = [];\n\n    this.probs          = {};\n    this.transmissions  = {}; // this is t(elf)\n    this.countef        = {};\n    this.totalf         = {};\n    this.totals         = {};\n  }\n\n  train(nativeText, foreignText) {\n\n    if (nativeText === undefined || foreignText === undefined) {\n      throw new Error('Native and Foreign Texts are both required!');\n    }\n\n    const convertedData = reader.text2token(nativeText);\n    this.nativeLines = convertedData.lines;\n    this.nativeWords = convertedData.tokens;\n\n    const convertedForeignData = reader.text2token(foreignText);\n    this.foreignLines = convertedForeignData.lines;\n    this.foreignWords = convertedForeignData.tokens;\n\n    this.sentencePairs = [];\n\n    for (let index = 0; index < this.nativeLines.length; index++) {\n      this.sentencePairs.push([\n        this.nativeLines[index],\n        this.foreignLines[index]\n      ]);\n    }\n\n    this._initTransmissions();\n    this._iterateEM(10);\n  }\n\n  _initTransmissions() {\n    const probs         = {},\n          transmissions = {};\n\n    for (let wordIndex = 0; wordIndex < this.nativeWords.length; wordIndex++) {\n      const word = this.nativeWords[wordIndex];\n      const word_poss = [];\n\n      // if word is in sentence then...\n      for (let lineIndex = 0; lineIndex < this.nativeLines.length; lineIndex++) {\n        const sentence = this.nativeLines[lineIndex];\n        if (sentence.indexOf(word) > -1) {\n          const matching = this.foreignLines[this.nativeLines.indexOf(sentence)];\n          const matches = matching.split(' ');\n          matches.forEach(match => word_poss.push(match));\n        }\n      }\n\n      /** Remove duplicates. */\n      /** Add probable matches. */\n      probs[word] = _.unique(word_poss);\n    }\n\n    this.probs = probs;\n\n    for (let wordIndex = 0; wordIndex < this.nativeWords.length; wordIndex++) {\n      const word = this.nativeWords[wordIndex];\n      const word_probs = this.probs[word];\n\n      const uniform_prob = 1.0 / word_probs.length;\n\n      const prob_set = {};\n\n      for (let probIndex = 0; probIndex < word_probs.length; probIndex++) {\n        const w = word_probs[probIndex];\n        prob_set[w] = uniform_prob;\n      }\n\n      transmissions[word] = prob_set;\n    }\n\n    this.transmissions = transmissions;\n  }\n\n  _iterateEM(count) {\n\n    for (let index = 0; index < count; index++) {\n      const totalf  = {},\n            countef = {};\n\n      for (let wordIndex = 0; wordIndex < this.nativeWords.length; wordIndex++) {\n        const word = this.nativeWords[wordIndex];\n\n        if (!this.probs.word) {\n          continue;\n        }\n        /* istanbul ignore next */\n        const word_probs = this.probs[word];\n        /* istanbul ignore next */\n        const prob_set = {};\n        /* istanbul ignore next */\n        for (let probIndex = 0; probIndex < word_probs.length; probIndex++) {\n          const w = word_probs[probIndex];\n          prob_set[w] = 0;\n        }\n        /* istanbul ignore next */\n        countef[word] = count;\n        /* istanbul ignore next */\n        totalf[word] = 0;\n      }\n\n      this.countef = countef;\n      this.totalf = totalf;\n\n      const self = this;\n\n      /** Iterate over each sentence pair. */\n      this.sentencePairs.forEach(sentence => {\n\n        const nativeTokens = sentence[0].split('');\n        const foreignTokens = sentence[1].split('');\n\n        for (let foreign = 0; foreign < foreignTokens.length; foreign++) {\n          this.totals[foreign] = 0;\n          for (let native = 0; native < nativeTokens.length; native++) {\n            if (!this.transmissions.n) {\n              continue;\n            }\n            /* istanbul ignore next */\n            if (!this.transmissions.n.f) {\n              continue;\n            }\n            /* istanbul ignore next */\n            this.countef[native][foreign] +=\n              this.transmissions[native][foreign] / this.totals[foreign];\n            /* istanbul ignore next */\n            this.totalf[native] +=\n              this.transmissions[native][foreign] / this.totals[foreign];\n          }\n        }\n\n        for (let native = 0; native < nativeTokens.length; native++) {\n          if (!this.probs.n) {\n            continue;\n          }\n          /* istanbul ignore next */\n          const n_prob = self.probs[native];\n          /* istanbul ignore next */\n          for (let foreign = 0; foreign < n_prob.length; native++) {\n            this.transmissions[native][foreign] = this.countef[native][foreign] / this.totalf[native];\n          }\n        }\n      });\n    }\n  }\n\n  translate(nativeWord) {\n    if (!this.transmissions[nativeWord] || nativeWord === undefined) {\n      throw new Error('No match found!');\n    }\n    return this.transmissions[nativeWord]\n  }\n\n}\n"]}